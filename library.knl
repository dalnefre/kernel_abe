;;;
;;; Kernel standard library
;;;

($define! car
	($lambda ((x . #ignore)) x))
($define! cdr
	($lambda ((#ignore . x)) x))
;...
($define! caar
	($lambda (((x . #ignore) . #ignore)) x))
($define! cdar
	($lambda (((#ignore . x) . #ignore)) x))
($define! cadr
	($lambda ((#ignore x . #ignore)) x))
($define! cddr
	($lambda ((#ignore . (#ignore . x))) x))
;...
($define! caaar
	($lambda ((((x . #ignore) . #ignore) . #ignore)) x))
($define! cdaar
	($lambda ((((#ignore . x) . #ignore) . #ignore)) x))
($define! cadar
	($lambda (((#ignore . (x . #ignore)) . #ignore)) x))
($define! cddar
	($lambda (((#ignore . (#ignore . x)) . #ignore)) x))
($define! caadr
	($lambda ((#ignore . ((x . #ignore) . #ignore))) x))
($define! cdadr
	($lambda ((#ignore . ((#ignore . x) . #ignore))) x))
($define! caddr
	($lambda ((#ignore . (#ignore . (x . #ignore)))) x))
($define! cdddr
	($lambda ((#ignore . (#ignore . (#ignore . x)))) x))
;...
($define! caaaar
	($lambda (((((x . #ignore) . #ignore) . #ignore) . #ignore)) x))
($define! cdaaar
	($lambda (((((#ignore . x) . #ignore) . #ignore) . #ignore)) x))
($define! cadaar
	($lambda ((((#ignore . (x . #ignore)) . #ignore) . #ignore)) x))
($define! cddaar
	($lambda ((((#ignore . (#ignore . x)) . #ignore) . #ignore)) x))
($define! caadar
	($lambda (((#ignore . ((x . #ignore) . #ignore)) . #ignore)) x))
($define! cdadar
	($lambda (((#ignore . ((#ignore . x) . #ignore)) . #ignore)) x))
($define! caddar
	($lambda (((#ignore . (#ignore . (x . #ignore))) . #ignore)) x))
($define! cdddar
	($lambda (((#ignore . (#ignore . (#ignore . x))) . #ignore)) x))
;...
($define! caaadr
	($lambda ((#ignore . (((x . #ignore) . #ignore) . #ignore))) x))
($define! cdaadr
	($lambda ((#ignore . (((#ignore . x) . #ignore) . #ignore))) x))
($define! cadadr
	($lambda ((#ignore . ((#ignore . (x . #ignore)) . #ignore))) x))
($define! cddadr
	($lambda ((#ignore . ((#ignore . (#ignore . x)) . #ignore))) x))
($define! caaddr
	($lambda ((#ignore . (#ignore . ((x . #ignore) . #ignore)))) x))
($define! cdaddr
	($lambda ((#ignore . (#ignore . ((#ignore . x) . #ignore)))) x))
($define! cadddr
	($lambda ((#ignore . (#ignore . (#ignore . (x . #ignore))))) x))
($define! cddddr
	($lambda ((#ignore . (#ignore . (#ignore . (#ignore . x))))) x))
;...
($define! equal?
	($lambda (x y)
		($if (pair? x)
			($if (equal? (car x) (car y))
				(equal? (cdr x) (cdr y))
				#f)
			(eq? x y))))
($define! apply
	($lambda (appv arg . opt)
		(eval (cons (unwrap appv) arg)
			($if (null? opt)
				(make-environment)
				(car opt)))))
($define! list*
	($lambda (head . tail)
		($if (null? tail)
			head
			(cons head (apply list* tail)))))
($define! $let
	($vau (bindings . body) env
		(eval (cons (list* $lambda (map car bindings) body)
			(map cadr bindings))
		env)))

;;;
;;; Bonus definitions
;;;

($define! Y  ; applicative Y-combinator (recursive fixed-point)
	($lambda (f) 
		(($lambda (g) 
			(g g)) 
			($lambda (h) 
				($lambda (x) 
					((f (h h)) x))))))
