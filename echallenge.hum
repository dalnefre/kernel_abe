#
# Joe Armstrong's Erlang challenge:
#   Create a ring of N processes
#   Send M simple messages around the ring
#   Increase N until out of resources
#

countdown_builder_beh(n) = \(first, m).[
	IF $n = 0 [
		BECOME countdown_ring_0_beh(first)
		SEND m TO first  # start message passing phase
	] ELSE [
		CREATE next WITH countdown_builder_beh(dec(n))
		BECOME countdown_ring_beh(next)
		SEND (first, m) TO next
	]
]

countdown_ring_0_beh(first) = \m.[
	IF $m = 0 [
		BECOME \_.[]
	] ELSE [
		SEND dec(m) TO first
	]
]

countdown_ring_beh(next) = \m.[
	SEND m TO next
]

# CREATE countdown WITH countdown_builder_beh(123456)
# SEND (countdown, 789) TO countdown

#
# an alternative implementation
# that grows the ring by one process
# for each time a message traverses the ring
#

ring_seed_beh(n) = \first.[
	CREATE next WITH ring_seed_beh(inc(n))
	BECOME ring_link_beh(next)
	SEND first TO first
]

ring_link_beh(next) = \first.[
	SEND first TO next
]

# CREATE ring WITH ring_seed_beh(0)
# SEND ring TO ring
